#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'smith'

module Smith
  class SmithControl

    include Logger

    DEFAULT_AGENCY_TIMEOUT = 60

    def initialize(options={})
      log_level((options[:log_level_given]) ? options[:log_level].to_sym : :info)
      @timeout = (options[:timeout_given]) ? options[:timeout] : DEFAULT_AGENCY_TIMEOUT
    end

    def send_command(command, args, &blk)
      begin
        send("#{Command.command_type(command)}_command", command, args, &blk)
      rescue Smith::Command::UnknownCommandError => e
        puts e.message
        Smith.stop(true)
      end
    end

    private

    def smithctl_command(command, args, &blk)
      Smith.channel.on_error do |ch,channel_close|
        case channel_close.reply_code
        when 404
          puts "No such queue: #{extract_queue(channel_close.reply_text)}"
        when 406
          puts "Queue in use: #{extract_queue(channel_close.reply_text)}"
        else
          puts channel_close.reply_text
          puts channel_close.reply_code
        end
      end

      responder = Messaging::Responder.new
      responder.callback do |v|
        puts v if v
        Smith.stop(true)
      end

      Command.run(command, args, :responder => responder)
    end

    def extract_queue(message)
      match = /.*?'(.*?)'.*$/.match(message) #[1]
      if match && match[1]
        match[1].sub(/smith\./, '')
      else
        message
      end
    end

    def agency_command(command, args, &blk)
      Messaging::Sender.new('agency.control', :auto_delete => true, :durable => false, :persistent => true,  :strict => true).ready do |sender|

        sender.timeout(@timeout) { puts "Timeout. Is the agency still running"; Smith.stop(true) }

        payload = ACL::Payload.new(:agency_command).content(:command => command, :args => args)

        callback = proc do |sender|
          sender.publish_and_receive(payload) do |r|
            blk.call(r.payload)
          end
        end

        errback = proc do
          puts "Agency not running"
          Smith.stop(true)
        end

        sender.consumers?(callback, errback)
      end
    end
  end

  parser = Trollop::Parser.new do
    version Smith::VERSION
    banner <<-EOS

Command line interface to control Smith.

Usage:
  smithctl commands
  smithctl <command> [options]
    EOS

    stop_on Command.commands
    opt :log_level, "Set the log level of smithctl only.", :short => :l, :type => :string
    opt :timeout,   "Specify the timeout when communicating with the agency.", :short => :t, :type => :integer, :default => 60
  end

  opts = Trollop::with_standard_exception_handling parser do
    raise Trollop::HelpNeeded if ARGV.size < 1
    parser.parse(ARGV).tap do
      unless Command.commands.include?(ARGV.first)
        puts "Unknown command: #{ARGV.first}"
        exit 1
      end
    end
  end

  command = ARGV.shift
  args = ARGV

  trap 'INT', proc { (Smith.running?) ? Smith.stop(true) : exit}

  Smith.load_acls

  control = SmithControl.new(opts)

  Smith.on_error do
    Smith.stop(true)
  end

  Smith.start(:quiet => true) do
    control.send_command(command, args) do |result|
      puts result if result && !result.empty?
      Smith.stop(true)
    end
  end
end
