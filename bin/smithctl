#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

%w{TERM INT QUIT}.each do |sig|
  trap sig, proc { exit }
end


$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'smith'

include Smith::Logger

module Smith
  class SmithControl


    def initialize(options={})
      log_level((options[:log_level_given]) ? options[:log_level].to_sym : :info)
      @timeout = (options[:timeout_given]) ? options[:timeout] : Smith.config.agency.timeout
    end

    def send_command(command, args, &blk)
      begin
        send("#{Command.command_type(command)}_command", command, args, &blk)
      rescue Smith::Command::UnknownCommandError => e
        blk.call(e.message)
      end
    end

    private

    def smithctl_command(command, args, &blk)
      Command.run(command, args, :responder => EM::Completion.new.tap { |c| c.completion(blk) })
    end

    def agency_command(command, args, &blk)
      Messaging::Sender.new('agency.control', :auto_delete => false, :durable => false, :persistent => true,  :strict => true) do |sender|

        timeout = Messaging::Timeout.new(5) { |message_id| blk.call("Timeout. Is the agency still running?") }

        sender.on_reply(:timeout => timeout) do |reply_payload, r|
          r.ack
          blk.call(reply_payload[:response])
        end

        # callback = proc do |sender|
          sender.publish(Smith::ACL::Factory.create(:agency_command, :command => command, :args => args))
        # end

        # errback = proc do
        #   blk.call("Agency not running.")
        # end

        # sender.consumers?(callback, errback)
      end
    end
  end

  parser = Trollop::Parser.new do
    version Smith::VERSION
    banner <<-EOS

Command line interface to control Smith.

Usage:
  smithctl commands
  smithctl <command> [options]
    EOS

    stop_on Command.commands
    opt :log_level, "Set the log level of smithctl only.", :short => :l, :type => :string
    opt :timeout,   "Specify the timeout when communicating with the agency.", :short => :t, :type => :integer, :default => 60
  end

  opts = Trollop::with_standard_exception_handling parser do
    raise Trollop::HelpNeeded if ARGV.size < 1
    parser.parse(ARGV).tap do
      unless Command.commands.include?(ARGV.first)
        puts "Unknown command: #{ARGV.first}"
        exit 1
      end
    end
  end

  command = ARGV.shift
  args = ARGV

  %w{TERM INT QUIT}.each do |sig|
    trap sig, proc { (Smith.running?) ? Smith.stop(true) : exit}
  end

  Smith.load_acls

  control = SmithControl.new(opts)

  Smith.start do
    control.send_command(command, args) do |result|
      puts result if result && !result.empty?
      Smith.stop(true)
    end
  end
end
