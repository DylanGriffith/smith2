* If an agent hasn't started after 20 seconds (ie there are no keep alives)
  set the state to dead.

* Have an top like tool. Send the agent state to a queue so that anything
  can attach to the queue and do with it what it will. If this is done on a
  topic queue with fanout then a tool would be able to get the state of every
  agent in the network. Obviously if nothing is listening on the queue then no
  messages would be sent.

* Agents should be namespace-able. The agency and smithctl should understand
  this. Agents should be controllable on a namespace basis, e.g. shutdown all
  agents in a particular namespace. Consider using vhosts.

* Allow an agent to verify that it's the same version as that on disc. Maybe
  implement an autoload system. Look at shogun

* Think about whether to not send messages to agents if they aren't alive.
  At the moment this is a little inconsistent: some command check to see it the
  agent is alive and others check to see if there is anything listening on the
  queue.

* Have an option that shuts down all agents when the agency is closed.

* Have a config item where I can put a list of agents that I can then start
  (or stop or kill for that matter)all at the same time. For example the command
  might be:

    smithctl group start <group name> smithctl group stop <group name>

* The list command should check to see if the agent is actually alive and
  add that information to the output.

* Have a flag for pop-queue that doesn't ack.

* Don't send messages to queues that don't exist [send, smithctl messages,
  pop-queue.

* list commnd should display the state of the agent.

* Think about the idea of a run list. Or is this already implemented in
  the state machine.

* Have a whitelist/blacklist mechanism listing agents that an agent can
  receive messages from.

* Have an errback if publish_and_receive times out.

* Add a message retry mechanism.

* Name reply queues based on the agent name.

* Delete queue should be part of smithctl. As should pop queue.

* smithctl message should have some sort of printf formating string
  that can be used to construct the protocol buffer message.

* See if Logging can take a proc/lambda. Some of the log messages
  are getting quite big. It doesn't. I don't think it would be that difficult to
  do: submit patch upstream.

* Have an option to not ack the pop-queue command. See Receiver#pop for a more
  detailed description. DONE (possibly)

* Have a SMITH_LOAD_PATH environment variable that overrides the path set up in
  the config

* Have a path where encoder files can be loaded from.

* Have something monitor the agents' state machine for signs of problems.
  For example if an agent is in the starting state for longer than a minutes or
  so

* Be able to change log level for individual loggers (ie per class).

* Add to_s to the Encoders, so when I call inspect on the message it
  gives a proper represntation.

* Setup a dead letter queue in case of error.

* The number of threads should be the same at the number of subscribed
  queues per process.

* Have message oounters for every agent.

* Save all protocol buffer files in a known place so the agency can
  compile before sending any messages. This solves the problem of how to load
  user supplied protocol buffer files. Make the path configurable

* Set default config for all options that make sense (which I think is
  all of tthem).

* Think about a generator to write the directory structure and what that
  directory structer might look like. Change Smith.root to the root of directory
  structure. You will need to think about what to do with the agent_path (ie the
  fact that multiple paths are alllowed).

* I've added a method called add_agent_load_path to the bootstrapper. When
  thinking about the above make sure you check whether that method fits.

* Add an option to the agency to specify a different config file. Also
  check the local directory to see if there is a config there.

* Think about how to make ./bin/send a general tool. Maybe write some rake
  tasks.

* Add some code to check the message type. At least for internal smith code. In
  the case of agency.control if the message is not AgencyCommand the agency will
  crash.

* Make an equivalent of ripl-rails: ripl-smith

* command line options to pass to the agency:

  * environment.
