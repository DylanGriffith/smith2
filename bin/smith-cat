#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'pp'
require 'smith'
require 'trollop'
require 'multi_json'

module Smith
  class SmithCat

    include Logger

    def initialize(opts)
      @opts = opts
      log_level(:info)
    end

    def cat(queue_name, data, &block)
      begin
        Smith::Messaging::Sender.new(queue_name, :auto_delete => @opts[:dynamic], :persistent => true, :nowait => false, :strict => true).ready do |sender|
          work = proc do |n,iter|
            sender.publish(json_to_payload(data, @opts[:type])) do
              iter.next
            end
          end

          done = proc do
            block.call
          end

          EM::Iterator.new(0..@opts[:number] - 1).each(work, done)

        end
      rescue MultiJson::DecodeError => e
        puts e
        Smith.stop
      end
    end

    private

    def json_to_payload(data, type)
      Smith::ACL::Payload.new(type.to_sym).content do |m|
        MultiJson.decode(data, :symbolize_keys => true).each do |k,v|
          m.send("#{k}=".to_sym, v)
        end
      end
    end
  end
end

trap 'INT', proc { (Smith.running?) ? Smith.stop(true) : exit}

parser = Trollop::Parser.new do
  banner "usage: #{$0} OPTIONS <queue> <file>"

  opt :type,     "message type", :type => :string, :default => 'default', :short => :t
  opt :json,     "supply the json representation with this flag", :type => :string, :short => :j
  opt :number,   "the number of times to send the message", :type => :integer, :default => 1, :short => :n
  opt :dynamic,  "send message to a dynamic queue", :type => :boolean, :default => false, :short => :d
end

opts = Trollop::with_standard_exception_handling parser do
  parser.parse(ARGV).tap do |o|
    raise Trollop::HelpNeeded if ARGV.size < 2 && !(ARGV.size == 1 && o.json_given)
  end
end

queue_name = ARGV[0]
file = ARGV[1]

data = (opts.json_given) ? opts[:json] : Pathname.new(file).read

Smith.start(:quiet => true) do
  $: << Smith.pb_cache_path

  Smith::SmithCat.new(opts).cat(queue_name, data) do
    Smith.stop(true)
  end
end
