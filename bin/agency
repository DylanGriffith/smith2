#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'pp'
require 'smith'
require 'smith/daemon'
require 'smith/acl_compiler'
require 'smith/application/agency'

module Smith
  class AgencyRunner

    include Logger

    AGENCY_NAME = 'agency'

    def initialize(opts={})

      @options = opts
      options_check

      @daemon = Daemon.new(add_vhost(AGENCY_NAME), opts[:daemon], opts[:pid_dir])
      @agency = Agency.new

      Smith.shutdown_hook do
        puts "Shutting down"
      end

      # Setup signal handlers to clean up.
      %w{TERM INT QUIT}.each do |sig|
        trap sig, proc { @agency.stop }
      end
    end

    def run
      if @daemon.running?
        logger.fatal { "The agency is alredy running" }
      else
        logger.info { "Using config file: #{Smith.config_path}" }
        @daemon.daemonise

        require 'smith/messaging/acl_type_cache'

        Smith.compile_acls

        Smith.start do
          # This block is here so the that the shutdown hook added in
          # Smith.start runs last. Yes I know this is leaky but that's how
          # it is at the moment.

          Smith.shutdown_hook do
            @daemon.unlink_pid_file
          end

          logger.info { "Starting #{File.basename($0)}" }
          @agency.setup_queues
          @agency.start_monitoring
        end
      end
    end

    private

    def options_check
      if @options[:daemon] && Regexp.new(/stdout|stderr/i).match(Smith.config.logging.appender[:type])
        puts "Logger set to stdout and daemonise is true. Log messages will be sent to /dev/null."
      end
    end

    def add_vhost(name)
      suffix = Pathname.new(Smith.config.amqp.broker.vhost).basename
      "%s.%s" % [name, (suffix.root?) ? 'root' : suffix.to_s]
    end
  end
end

parser = Trollop::Parser.new do
  opt :daemon,      "daemonise", :default => false, :short => :d
  opt :pid,         "pid file", :type => :string, :short => :p
end

opts = Trollop::with_standard_exception_handling parser do
  #raise Trollop::HelpNeeded if ARGV.size < 2
  parser.parse ARGV
end

agency_runner = Smith::AgencyRunner.new(opts)
agency_runner.run
